function P_interp=interp_with_shapefnc(N,P,MSH,opt)
% P_interp = interp_with_shapefnc(N, P, MSH, opt)
%
% Interpolate value P defined on nodes using the shape functions N
%
% Input
% N : [1 x N_sh] Shape functions values. This is the outcome of the functions shapefunctions.m
% P : [Np x 1] The property for interpolation defined on the nodes. Np is
%       the number of nodes in the mesh
% opt : a structure variable with fields:
%       dim : dimension of the elements e.g. 1, 2 or 3
%       el_type : type of elements
%       el_order : order of elements
%
% Output
% P_interp : interpolated values on the points defined by the
% shape function values
%
% Version : 1.0
% Author : George Kourakos
% email: giorgk@gmail.com
% web : http://groundwater.ucdavis.edu/msim
% Date 18-Dec_2012
% Department of Land Air and Water
% University of California Davis

if opt.dim ==1
    switch opt.el_order
        case 'linear'
            P_interp=N(1)*P(MSH(:,1),1)+ N(2)*P(MSH(:,2),1);
        case 'quadratic'
            P_interp=N(1)*P(MSH(:,1),1)+ N(2)*P(MSH(:,2),1)+...
                                   N(3)*P(MSH(:,3),1);
    end
elseif opt.dim==2
    switch opt.el_type
        case 'triangle'
            switch opt.el_order
                case 'linear'
                    P_interp=N(1)*P(MSH(:,1),1)+...
                             N(2)*P(MSH(:,2),1)+...
                             N(3)*P(MSH(:,3),1);
                case 'quadratic'
                    P_interp=N(1)*P(MSH(:,1),1)+...
                             N(2)*P(MSH(:,2),1)+...
                             N(3)*P(MSH(:,3),1)+...
                             N(4)*P(MSH(:,4),1)+...
                             N(5)*P(MSH(:,5),1)+...
                             N(6)*P(MSH(:,6),1);
            end
        case 'quad'
            switch opt.el_order
                case 'linear'
                    P_interp=N(1)*P(MSH(:,1),1)+...
                             N(2)*P(MSH(:,2),1)+...
                             N(3)*P(MSH(:,3),1)+...
                             N(4)*P(MSH(:,4),1);
                case 'quadratic_9'
                    P_interp=N(1)*P(MSH(:,1),1)+...
                             N(2)*P(MSH(:,2),1)+...
                             N(3)*P(MSH(:,3),1)+...
                             N(4)*P(MSH(:,4),1)+...
                             N(5)*P(MSH(:,5),1)+...
                             N(6)*P(MSH(:,6),1)+...
                             N(7)*P(MSH(:,7),1)+...
                             N(8)*P(MSH(:,8),1)+...
                             N(9)*P(MSH(:,9),1);
            end
    end
elseif opt.dim==3
    switch opt.el_type
        case 'prism'
            switch opt.el_order
                case 'linear'
                    P_interp=N(1)*P(MSH(:,1),1)+...
                             N(2)*P(MSH(:,2),1)+...
                             N(3)*P(MSH(:,3),1)+...
                             N(4)*P(MSH(:,4),1)+...
                             N(5)*P(MSH(:,5),1)+...
                             N(6)*P(MSH(:,6),1);
                case 'quadratic'
                    P_interp=N(1)*P(MSH(:,1),1)+...
                             N(2)*P(MSH(:,2),1)+...
                             N(3)*P(MSH(:,3),1)+...
                             N(4)*P(MSH(:,4),1)+...
                             N(5)*P(MSH(:,5),1)+...
                             N(6)*P(MSH(:,6),1)+...
                             N(7)*P(MSH(:,7),1)+...
                             N(8)*P(MSH(:,8),1)+...
                             N(9)*P(MSH(:,9),1)+...
                             N(10)*P(MSH(:,10),1)+...
                             N(11)*P(MSH(:,11),1)+...
                             N(12)*P(MSH(:,12),1)+...
                             N(13)*P(MSH(:,13),1)+...
                             N(14)*P(MSH(:,14),1)+...
                             N(15)*P(MSH(:,15),1)+...
                             N(16)*P(MSH(:,16),1)+...
                             N(17)*P(MSH(:,17),1)+...
                             N(18)*P(MSH(:,18),1);
            end
        case 'hex'
            switch opt.el_order
                case 'linear'
                    P_interp=N(1)*P(MSH(:,1),1)+...
                             N(2)*P(MSH(:,2),1)+...
                             N(3)*P(MSH(:,3),1)+...
                             N(4)*P(MSH(:,4),1)+...
                             N(5)*P(MSH(:,5),1)+...
                             N(6)*P(MSH(:,6),1)+...
                             N(7)*P(MSH(:,7),1)+...
                             N(8)*P(MSH(:,8),1);
                case 'quadratic_27'
                    P_interp=N(1)*P(MSH(:,1),1)+...
                             N(2)*P(MSH(:,2),1)+...
                             N(3)*P(MSH(:,3),1)+...
                             N(4)*P(MSH(:,4),1)+...
                             N(5)*P(MSH(:,5),1)+...
                             N(6)*P(MSH(:,6),1)+...
                             N(7)*P(MSH(:,7),1)+...
                             N(8)*P(MSH(:,8),1)+...
                             N(9)*P(MSH(:,9),1)+...
                             N(10)*P(MSH(:,10),1)+...
                             N(11)*P(MSH(:,11),1)+...
                             N(12)*P(MSH(:,12),1)+...
                             N(13)*P(MSH(:,13),1)+...
                             N(14)*P(MSH(:,14),1)+...
                             N(15)*P(MSH(:,15),1)+...
                             N(16)*P(MSH(:,16),1)+...
                             N(17)*P(MSH(:,17),1)+...
                             N(18)*P(MSH(:,18),1)+...
                             N(19)*P(MSH(:,19),1)+...
                             N(20)*P(MSH(:,20),1)+...
                             N(21)*P(MSH(:,21),1)+...
                             N(22)*P(MSH(:,22),1)+...
                             N(23)*P(MSH(:,23),1)+...
                             N(24)*P(MSH(:,24),1)+...
                             N(25)*P(MSH(:,25),1)+...
                             N(26)*P(MSH(:,26),1)+...
                             N(27)*P(MSH(:,27),1);
                             
                    
            end
    end
end
                        